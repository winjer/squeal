#! /usr/bin/env python

""" Provide command line access to do stuff with the squealserver server. """

usage = """%prog [options] [command]

Command:
  start      Start the squeal server, if it is not already running
  stop       Stop the squeal server, if it is running
  status     Report on the status of the squeal server
  wipe       Wipe the squealserver database completely, and reinitialise it
  debug      Start in debug mode, with a python prompt
  fg         Run in the foreground, writing the log to the screen
"""

import pwd
import os
import sys
import optparse
import subprocess
from itertools import chain

# ignore some warnings from 3rd party modules
import warnings
warnings.filterwarnings('ignore', "the md5 module is deprecated")
warnings.filterwarnings('ignore', "The popen2 module is deprecated.")

from squeal import isqueal

class SquealManager:

    def __init__(self, database, logfile, user):
        self.store = None
        self.database = database
        self.logfile = logfile
        self.uid = os.getuid()
        if self.uid == 0:
            # only change user if running as root
            pwdnam = pwd.getpwnam(user)
            self.uid = pwdnam.pw_uid
            self.gid = pwdnam.pw_gid
            self.username = user
        else:
            self.gid = os.getgid()
            self.username = pwd.getpwuid(self.uid).pw_name
            

    def axiomatic(self, *args):
        from axiom.scripts import axiomatic
        axiomatic.main(list(chain(["--dbdir", self.database], args)))

    def start(self, foreground=False):
        if not os.path.exists(self.database):
            self.create_db()
            self.create_manager()
        if foreground:
            args = ["start", "-n"]
        else:
            args = ["start", "--logfile", self.logfile, "--uid", self.uid, "--gid", self.gid]
        self.axiomatic(*args)

    def stop(self):
        self.axiomatic("stop")

    @property
    def account_service(self):
        for r in self.store.powerupsFor(isqueal.IAccountService):
            return r

    def create_manager(self):
        self.account_service.add_account(u"Manager", u"manager", u"password")

    def create_db(self):
        from axiom.store import Store
        from twisted.application.service import IService
        from squeal.web.service import WebService
        from squeal.net.slimproto import SlimService
        from squeal.playlist.service import Playlist
        from squeal.event import EventReactor
        from squeal.extension import PluginManager
        from squeal.account.service import AccountService
        from axiom.userbase import LoginSystem

        self.store = Store(self.database)

        services = (
            AccountService,
            EventReactor,
            WebService,
            SlimService,
            Playlist,
            PluginManager,
            LoginSystem
        )

        for srv in services:
            s = srv(store=self.store)
            self.store.powerUp(s)

        os.system("chown -R %s: %s" % (self.username, self.database))

if __name__ == "__main__":

    p = optparse.OptionParser(usage=usage)
    p.add_option("-d", "--database", help="Specify database location", default="/var/lib/squeal/db")
    p.add_option("-l", "--logfile", help="Log file location", default="/var/log/squeal.log")
    p.add_option("-L", "--libpath", help="path to the squeal libs", default="/usr/share/squeal")
    p.add_option("-u", "--user", help="user to run as (only used if started as root)", default="squeal")
    opts, args = p.parse_args()

    if len(args) != 1:
        p.print_help()
        raise SystemExit

    if opts.libpath:
        print "Inserting", opts.libpath, "onto PYTHONPATH"
        sys.path.insert(0, opts.libpath)
    mgr = SquealManager(database=opts.database, logfile=opts.logfile, user=opts.user)

    command = args[0]
    if command == "start":
        mgr.start()
    elif command == "fg":
        mgr.start(foreground=True)
    elif command == "stop":
        mgr.stop()
    elif command == "wipe":
        mgr.wipe()
    elif command == "status":
        mgr.status()
    elif command == "debug":
        mgr.debug()
    else:
        p.print_help()
        raise SystemExit


